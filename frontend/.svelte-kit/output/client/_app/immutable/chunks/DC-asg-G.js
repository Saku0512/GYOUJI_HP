import{ab as v,B as i}from"./CuY-H75l.js";import{a as w}from"./CzS31Zl-.js";class A{constructor(r=w){this.client=r,this.supportedSports=["volleyball","table_tennis","soccer"]}validateSport(r){if(!r)throw new Error("スポーツ名が指定されていません");if(!this.supportedSports.includes(r))throw new Error(`サポートされていないスポーツです: ${r}`);return!0}async getTournaments(){try{const r=await this.client.get("/tournaments");return r.success?{success:!0,data:r.data,message:"トーナメント一覧を取得しました"}:r}catch(r){return console.error("Get tournaments error:",r),{success:!1,error:"GET_TOURNAMENTS_ERROR",message:"トーナメント一覧の取得に失敗しました",details:r.message}}}async getTournament(r){try{this.validateSport(r);const e=await this.client.get(`/tournaments/${r}`);return e.success?{success:!0,data:e.data,message:`${r}のトーナメント情報を取得しました`}:e}catch(e){return console.error("Get tournament error:",e),{success:!1,error:"GET_TOURNAMENT_ERROR",message:"トーナメント情報の取得に失敗しました",details:e.message}}}async getTournamentBracket(r){try{this.validateSport(r);const e=await this.client.get(`/tournaments/${r}/bracket`);return e.success?{success:!0,data:e.data,message:`${r}のブラケット情報を取得しました`}:e}catch(e){return console.error("Get tournament bracket error:",e),{success:!1,error:"GET_BRACKET_ERROR",message:"ブラケット情報の取得に失敗しました",details:e.message}}}async updateTournamentFormat(r,e){try{if(this.validateSport(r),!e)throw new Error("形式が指定されていません");const t=await this.client.put(`/tournaments/${r}/format`,{format:e});return t.success?{success:!0,data:t.data,message:`${r}のトーナメント形式を${e}に更新しました`}:t}catch(t){return console.error("Update tournament format error:",t),{success:!1,error:"UPDATE_FORMAT_ERROR",message:"トーナメント形式の更新に失敗しました",details:t.message}}}async createTournament(r){try{const{sport:e,format:t,teams:a}=r;if(this.validateSport(e),!t)throw new Error("トーナメント形式が指定されていません");if(!a||!Array.isArray(a)||a.length===0)throw new Error("参加チーム情報が正しくありません");const u=await this.client.post("/tournaments",{sport:e,format:t,teams:a});return u.success?{success:!0,data:u.data,message:`${e}のトーナメントを作成しました`}:u}catch(e){return console.error("Create tournament error:",e),{success:!1,error:"CREATE_TOURNAMENT_ERROR",message:"トーナメントの作成に失敗しました",details:e.message}}}async deleteTournament(r){try{this.validateSport(r);const e=await this.client.delete(`/tournaments/${r}`);return e.success?{success:!0,data:e.data,message:`${r}のトーナメントを削除しました`}:e}catch(e){return console.error("Delete tournament error:",e),{success:!1,error:"DELETE_TOURNAMENT_ERROR",message:"トーナメントの削除に失敗しました",details:e.message}}}async updateTournamentStatus(r,e){try{if(this.validateSport(r),!["pending","active","completed","cancelled"].includes(e))throw new Error(`無効なステータスです: ${e}`);const a=await this.client.patch(`/tournaments/${r}/status`,{status:e});return a.success?{success:!0,data:a.data,message:`${r}のトーナメント状態を${e}に更新しました`}:a}catch(t){return console.error("Update tournament status error:",t),{success:!1,error:"UPDATE_STATUS_ERROR",message:"トーナメント状態の更新に失敗しました",details:t.message}}}async getTournamentStats(r){try{this.validateSport(r);const e=await this.client.get(`/tournaments/${r}/stats`);return e.success?{success:!0,data:e.data,message:`${r}の統計情報を取得しました`}:e}catch(e){return console.error("Get tournament stats error:",e),{success:!1,error:"GET_STATS_ERROR",message:"統計情報の取得に失敗しました",details:e.message}}}async getAvailableFormats(r){try{this.validateSport(r);const e=await this.client.get(`/tournaments/${r}/formats`);return e.success?{success:!0,data:e.data,message:`${r}の利用可能な形式一覧を取得しました`}:e}catch(e){return console.error("Get available formats error:",e),{success:!1,error:"GET_FORMATS_ERROR",message:"形式一覧の取得に失敗しました",details:e.message}}}getSupportedSports(){return{success:!0,data:this.supportedSports,message:"サポートされているスポーツ一覧"}}}const p=new A;class M{constructor(r=w){this.client=r,this.supportedSports=["volleyball","table_tennis","soccer"],this.validStatuses=["pending","in_progress","completed","cancelled"]}validateSport(r){if(!r)throw new Error("スポーツ名が指定されていません");if(!this.supportedSports.includes(r))throw new Error(`サポートされていないスポーツです: ${r}`);return!0}validateMatchId(r){if(!r)throw new Error("試合IDが指定されていません");if(typeof r!="number"&&typeof r!="string")throw new Error("試合IDの形式が正しくありません");return!0}validateMatchResult(r){if(!r||typeof r!="object")throw new Error("試合結果データが正しくありません");const{score1:e,score2:t,winner:a}=r;if(e!==void 0&&(typeof e!="number"||e<0))throw new Error("チーム1のスコアが正しくありません");if(t!==void 0&&(typeof t!="number"||t<0))throw new Error("チーム2のスコアが正しくありません");if(e!==void 0&&t!==void 0&&a!==void 0&&(typeof a!="string"||a.trim()===""))throw new Error("勝者の情報が正しくありません");return!0}async getMatches(r,e={}){try{this.validateSport(r);const t=new URLSearchParams;e.status&&t.append("status",e.status),e.round&&t.append("round",e.round),e.limit&&t.append("limit",e.limit.toString()),e.offset&&t.append("offset",e.offset.toString());const a=t.toString(),u=`/matches/${r}${a?`?${a}`:""}`,l=await this.client.get(u);return l.success?{success:!0,data:l.data,message:`${r}の試合一覧を取得しました`}:l}catch(t){return console.error("Get matches error:",t),{success:!1,error:"GET_MATCHES_ERROR",message:"試合一覧の取得に失敗しました",details:t.message}}}async getMatch(r){try{this.validateMatchId(r);const e=await this.client.get(`/matches/${r}`);return e.success?{success:!0,data:e.data,message:"試合詳細を取得しました"}:e}catch(e){return console.error("Get match error:",e),{success:!1,error:"GET_MATCH_ERROR",message:"試合詳細の取得に失敗しました",details:e.message}}}async updateMatch(r,e){try{this.validateMatchId(r),this.validateMatchResult(e);const t=await this.client.put(`/matches/${r}`,e);return t.success?{success:!0,data:t.data,message:"試合結果を更新しました"}:t}catch(t){return console.error("Update match error:",t),{success:!1,error:"UPDATE_MATCH_ERROR",message:"試合結果の更新に失敗しました",details:t.message}}}async createMatch(r){try{if(!r||typeof r!="object")throw new Error("試合データが正しくありません");const{sport:e,tournament_id:t,round:a,team1:u,team2:l,scheduled_at:j}=r;if(!e)throw new Error("スポーツが指定されていません");if(this.validateSport(e),!t)throw new Error("トーナメントIDが指定されていません");if(!a)throw new Error("ラウンドが指定されていません");if(!u||!l)throw new Error("対戦チームが正しく指定されていません");if(u===l)throw new Error("同じチーム同士の試合は作成できません");const f=await this.client.post("/matches",r);return f.success?{success:!0,data:f.data,message:"新しい試合を作成しました"}:f}catch(e){return console.error("Create match error:",e),{success:!1,error:"CREATE_MATCH_ERROR",message:"試合の作成に失敗しました",details:e.message}}}async deleteMatch(r){try{this.validateMatchId(r);const e=await this.client.delete(`/matches/${r}`);return e.success?{success:!0,data:e.data,message:"試合を削除しました"}:e}catch(e){return console.error("Delete match error:",e),{success:!1,error:"DELETE_MATCH_ERROR",message:"試合の削除に失敗しました",details:e.message}}}async updateMatchStatus(r,e){try{if(this.validateMatchId(r),!this.validStatuses.includes(e))throw new Error(`無効なステータスです: ${e}`);const t=await this.client.patch(`/matches/${r}/status`,{status:e});return t.success?{success:!0,data:t.data,message:`試合状態を${e}に更新しました`}:t}catch(t){return console.error("Update match status error:",t),{success:!1,error:"UPDATE_MATCH_STATUS_ERROR",message:"試合状態の更新に失敗しました",details:t.message}}}async getPendingMatches(r){try{this.validateSport(r);const e=await this.client.get(`/matches/${r}/pending`);return e.success?{success:!0,data:e.data,message:`${r}の未完了試合一覧を取得しました`}:e}catch(e){return console.error("Get pending matches error:",e),{success:!1,error:"GET_PENDING_MATCHES_ERROR",message:"未完了試合一覧の取得に失敗しました",details:e.message}}}async updateMultipleMatches(r){try{if(!Array.isArray(r)||r.length===0)throw new Error("更新データが正しくありません");for(const t of r){if(!t.matchId)throw new Error("試合IDが指定されていない更新データがあります");this.validateMatchId(t.matchId),this.validateMatchResult(t.result)}const e=await this.client.put("/matches/batch",{updates:r});return e.success?{success:!0,data:e.data,message:`${r.length}件の試合結果を更新しました`}:e}catch(e){return console.error("Update multiple matches error:",e),{success:!1,error:"UPDATE_MULTIPLE_MATCHES_ERROR",message:"試合結果の一括更新に失敗しました",details:e.message}}}async getMatchStats(r){try{this.validateMatchId(r);const e=await this.client.get(`/matches/${r}/stats`);return e.success?{success:!0,data:e.data,message:"試合統計情報を取得しました"}:e}catch(e){return console.error("Get match stats error:",e),{success:!1,error:"GET_MATCH_STATS_ERROR",message:"試合統計情報の取得に失敗しました",details:e.message}}}async getNextMatch(r){try{this.validateSport(r);const e=await this.client.get(`/matches/${r}/next`);return e.success?{success:!0,data:e.data,message:`${r}の次の試合情報を取得しました`}:e}catch(e){return console.error("Get next match error:",e),{success:!1,error:"GET_NEXT_MATCH_ERROR",message:"次の試合情報の取得に失敗しました",details:e.message}}}getSupportedSports(){return{success:!0,data:this.supportedSports,message:"サポートされているスポーツ一覧"}}getValidStatuses(){return{success:!0,data:this.validStatuses,message:"有効なステータス一覧"}}}const $=new M,T={tournaments:{},currentSport:"volleyball",loading:!1,error:null,lastUpdated:null,cache:{},pollingInterval:null},{subscribe:o,set:O,update:n}=v(T),I=300*1e3,U=30*1e3,S=["volleyball","table_tennis","soccer"];function m(s){n(r=>({...r,loading:s}))}function c(s){n(r=>({...r,error:s,loading:!1}))}function h(){n(s=>({...s,error:null}))}function g(s){if(!s)throw new Error("スポーツ名が指定されていません");if(!S.includes(s))throw new Error(`サポートされていないスポーツです: ${s}`);return!0}function b(s){const e=i({subscribe:o}).cache[s];return!e||!e.timestamp?!1:Date.now()-e.timestamp<I}function C(s){const e=i({subscribe:o}).cache[s];return e&&b(s)?e.data:null}function R(s,r){n(e=>({...e,cache:{...e.cache,[s]:{data:r,timestamp:Date.now()}}}))}async function d(s=null,r=!0){try{if(h(),s){if(g(s),r){const t=C(s);if(t)return n(a=>({...a,tournaments:{...a.tournaments,[s]:t}})),{success:!0,data:t,message:`${s}のトーナメントデータを取得しました（キャッシュ）`}}m(!0);const e=await p.getTournament(s);return e.success?(n(t=>({...t,tournaments:{...t.tournaments,[s]:e.data},loading:!1,lastUpdated:Date.now()})),R(s,e.data),e):(c(e.message||"トーナメントデータの取得に失敗しました"),e)}else{m(!0);const e=await p.getTournaments();return e.success?(n(t=>({...t,tournaments:e.data,loading:!1,lastUpdated:Date.now()})),e.data&&typeof e.data=="object"&&Object.keys(e.data).forEach(t=>{R(t,e.data[t])}),e):(c(e.message||"トーナメントデータの取得に失敗しました"),e)}}catch(e){return console.error("Fetch tournaments error:",e),c(e.message||"予期しないエラーが発生しました"),{success:!1,error:"FETCH_TOURNAMENTS_ERROR",message:e.message||"トーナメントデータの取得に失敗しました"}}}async function D(s,r){try{if(h(),!s)throw new Error("試合IDが指定されていません");if(!r||typeof r!="object")throw new Error("試合結果データが正しくありません");m(!0);const e=await $.updateMatch(s,r);if(e.success){const a=i({subscribe:o}).currentSport;return await d(a,!1),{success:!0,data:e.data,message:"試合結果を更新しました"}}else return c(e.message||"試合結果の更新に失敗しました"),e}catch(e){return console.error("Update match error:",e),c(e.message||"予期しないエラーが発生しました"),{success:!1,error:"UPDATE_MATCH_ERROR",message:e.message||"試合結果の更新に失敗しました"}}}function P(s){try{return g(s),n(r=>({...r,currentSport:s,error:null})),d(s),{success:!0,message:`スポーツを${s}に切り替えました`}}catch(r){return console.error("Switch sport error:",r),c(r.message||"スポーツの切り替えに失敗しました"),{success:!1,error:"SWITCH_SPORT_ERROR",message:r.message||"スポーツの切り替えに失敗しました"}}}async function E(s=null){try{h();const r=i({subscribe:o}),e=s||r.currentSport,t=await d(e,!1);return{success:!0,message:"データを更新しました"}}catch(r){return console.error("Refresh data error:",r),c(r.message||"データの更新に失敗しました"),{success:!1,error:"REFRESH_DATA_ERROR",message:r.message||"データの更新に失敗しました"}}}function y(){if(i({subscribe:o}).pollingInterval)return;const r=setInterval(async()=>{if(!(typeof document<"u"&&document.hidden||i({subscribe:o}).loading))try{await E()}catch(t){console.error("Polling error:",t)}},U);n(e=>({...e,pollingInterval:r}))}function _(){n(s=>(s.pollingInterval&&clearInterval(s.pollingInterval),{...s,pollingInterval:null}))}async function G(){try{return await d(),y(),typeof document<"u"&&document.addEventListener("visibilitychange",()=>{document.hidden||E()}),{success:!0,message:"トーナメントストアを初期化しました"}}catch(s){return console.error("Initialize tournament store error:",s),c(s.message||"初期化に失敗しました"),{success:!1,error:"INITIALIZE_ERROR",message:s.message||"初期化に失敗しました"}}}function N(){return _(),O(T),{success:!0,message:"トーナメントストアをクリーンアップしました"}}function H(){const s=i({subscribe:o});return s.tournaments[s.currentSport]||null}function L(s){return g(s),i({subscribe:o}).tournaments[s]||null}function F(){return[...S]}const B={subscribe:o,fetchTournaments:d,updateMatch:D,switchSport:P,refreshData:E,initialize:G,cleanup:N,startPolling:y,stopPolling:_,getCurrentTournament:H,getTournamentBySport:L,getSupportedSports:F,setLoading:m,setError:c,clearError:h};export{p as a,$ as m,B as t};
