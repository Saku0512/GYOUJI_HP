import{av as t,a2 as e,z as s,L as a,al as r,w as i,v as n,am as o,R as c,B as l,D as h,F as u,O as g,K as m,u as d}from"./VVabkdHj.js";import{d as p,u as y,l as w}from"./JJD-QFX9.js";import"./Cm9PB-7n.js";import{i as f}from"./B-6MdqlE.js";import{a as b,e as E,s as v}from"./BH2mRkq2.js";import{p as T,s as R,a as C}from"./BSkGyvYi.js";const S=new class{constructor(t=p){this.client=t,this.supportedSports=["volleyball","table_tennis","soccer"]}validateSport(t){if(!t)throw new Error("スポーツ名が指定されていません");if(!this.supportedSports.includes(t))throw new Error(`サポートされていないスポーツです: ${t}`);return!0}async getTournaments(){try{const t=await this.client.get("/tournaments");return t.success?{success:!0,data:t.data,message:"トーナメント一覧を取得しました"}:t}catch(t){return{success:!1,error:"GET_TOURNAMENTS_ERROR",message:"トーナメント一覧の取得に失敗しました",details:t.message}}}async getTournament(t){try{this.validateSport(t);const e=await this.client.get(`/tournaments/${t}`);return e.success?{success:!0,data:e.data,message:`${t}のトーナメント情報を取得しました`}:e}catch(e){return{success:!1,error:"GET_TOURNAMENT_ERROR",message:"トーナメント情報の取得に失敗しました",details:e.message}}}async getTournamentBracket(t){try{this.validateSport(t);const e=await this.client.get(`/tournaments/${t}/bracket`);return e.success?{success:!0,data:e.data,message:`${t}のブラケット情報を取得しました`}:e}catch(e){return{success:!1,error:"GET_BRACKET_ERROR",message:"ブラケット情報の取得に失敗しました",details:e.message}}}async updateTournamentFormat(t,e){try{if(this.validateSport(t),!e)throw new Error("形式が指定されていません");const s=await this.client.put(`/tournaments/${t}/format`,{format:e});return s.success?{success:!0,data:s.data,message:`${t}のトーナメント形式を${e}に更新しました`}:s}catch(s){return{success:!1,error:"UPDATE_FORMAT_ERROR",message:"トーナメント形式の更新に失敗しました",details:s.message}}}async createTournament(t){try{const{sport:e,format:s,teams:a}=t;if(this.validateSport(e),!s)throw new Error("トーナメント形式が指定されていません");if(!a||!Array.isArray(a)||0===a.length)throw new Error("参加チーム情報が正しくありません");const r=await this.client.post("/tournaments",{sport:e,format:s,teams:a});return r.success?{success:!0,data:r.data,message:`${e}のトーナメントを作成しました`}:r}catch(e){return{success:!1,error:"CREATE_TOURNAMENT_ERROR",message:"トーナメントの作成に失敗しました",details:e.message}}}async deleteTournament(t){try{this.validateSport(t);const e=await this.client.delete(`/tournaments/${t}`);return e.success?{success:!0,data:e.data,message:`${t}のトーナメントを削除しました`}:e}catch(e){return{success:!1,error:"DELETE_TOURNAMENT_ERROR",message:"トーナメントの削除に失敗しました",details:e.message}}}async updateTournamentStatus(t,e){try{this.validateSport(t);if(!["pending","active","completed","cancelled"].includes(e))throw new Error(`無効なステータスです: ${e}`);const s=await this.client.patch(`/tournaments/${t}/status`,{status:e});return s.success?{success:!0,data:s.data,message:`${t}のトーナメント状態を${e}に更新しました`}:s}catch(s){return{success:!1,error:"UPDATE_STATUS_ERROR",message:"トーナメント状態の更新に失敗しました",details:s.message}}}async getTournamentStats(t){try{this.validateSport(t);const e=await this.client.get(`/tournaments/${t}/stats`);return e.success?{success:!0,data:e.data,message:`${t}の統計情報を取得しました`}:e}catch(e){return{success:!1,error:"GET_STATS_ERROR",message:"統計情報の取得に失敗しました",details:e.message}}}async getAvailableFormats(t){try{this.validateSport(t);const e=await this.client.get(`/tournaments/${t}/formats`);return e.success?{success:!0,data:e.data,message:`${t}の利用可能な形式一覧を取得しました`}:e}catch(e){return{success:!1,error:"GET_FORMATS_ERROR",message:"形式一覧の取得に失敗しました",details:e.message}}}getSupportedSports(){return{success:!0,data:this.supportedSports,message:"サポートされているスポーツ一覧"}}};const L=new class{constructor(t=p){this.client=t,this.supportedSports=["volleyball","table_tennis","soccer"],this.validStatuses=["pending","in_progress","completed","cancelled"]}validateSport(t){if(!t)throw new Error("スポーツ名が指定されていません");if(!this.supportedSports.includes(t))throw new Error(`サポートされていないスポーツです: ${t}`);return!0}validateMatchId(t){if(!t)throw new Error("試合IDが指定されていません");if("number"!=typeof t&&"string"!=typeof t)throw new Error("試合IDの形式が正しくありません");return!0}validateMatchResult(t){if(!t||"object"!=typeof t)throw new Error("試合結果データが正しくありません");const{score1:e,score2:s,winner:a}=t;if(void 0!==e&&("number"!=typeof e||e<0))throw new Error("チーム1のスコアが正しくありません");if(void 0!==s&&("number"!=typeof s||s<0))throw new Error("チーム2のスコアが正しくありません");if(void 0!==e&&void 0!==s&&void 0!==a&&("string"!=typeof a||""===a.trim()))throw new Error("勝者の情報が正しくありません");return!0}async getMatches(t,e={}){try{this.validateSport(t);const s=new URLSearchParams;e.status&&s.append("status",e.status),e.round&&s.append("round",e.round),e.limit&&s.append("limit",e.limit.toString()),e.offset&&s.append("offset",e.offset.toString());const a=s.toString(),r=`/matches/${t}${a?`?${a}`:""}`,i=await this.client.get(r);return i.success?{success:!0,data:i.data,message:`${t}の試合一覧を取得しました`}:i}catch(s){return{success:!1,error:"GET_MATCHES_ERROR",message:"試合一覧の取得に失敗しました",details:s.message}}}async getMatch(t){try{this.validateMatchId(t);const e=await this.client.get(`/matches/${t}`);return e.success?{success:!0,data:e.data,message:"試合詳細を取得しました"}:e}catch(e){return{success:!1,error:"GET_MATCH_ERROR",message:"試合詳細の取得に失敗しました",details:e.message}}}async updateMatch(t,e){try{this.validateMatchId(t),this.validateMatchResult(e);const s=await this.client.put(`/matches/${t}`,e);return s.success?{success:!0,data:s.data,message:"試合結果を更新しました"}:s}catch(s){return{success:!1,error:"UPDATE_MATCH_ERROR",message:"試合結果の更新に失敗しました",details:s.message}}}async createMatch(t){try{if(!t||"object"!=typeof t)throw new Error("試合データが正しくありません");const{sport:e,tournament_id:s,round:a,team1:r,team2:i,scheduled_at:n}=t;if(!e)throw new Error("スポーツが指定されていません");if(this.validateSport(e),!s)throw new Error("トーナメントIDが指定されていません");if(!a)throw new Error("ラウンドが指定されていません");if(!r||!i)throw new Error("対戦チームが正しく指定されていません");if(r===i)throw new Error("同じチーム同士の試合は作成できません");const o=await this.client.post("/matches",t);return o.success?{success:!0,data:o.data,message:"新しい試合を作成しました"}:o}catch(e){return{success:!1,error:"CREATE_MATCH_ERROR",message:"試合の作成に失敗しました",details:e.message}}}async deleteMatch(t){try{this.validateMatchId(t);const e=await this.client.delete(`/matches/${t}`);return e.success?{success:!0,data:e.data,message:"試合を削除しました"}:e}catch(e){return{success:!1,error:"DELETE_MATCH_ERROR",message:"試合の削除に失敗しました",details:e.message}}}async updateMatchStatus(t,e){try{if(this.validateMatchId(t),!this.validStatuses.includes(e))throw new Error(`無効なステータスです: ${e}`);const s=await this.client.patch(`/matches/${t}/status`,{status:e});return s.success?{success:!0,data:s.data,message:`試合状態を${e}に更新しました`}:s}catch(s){return{success:!1,error:"UPDATE_MATCH_STATUS_ERROR",message:"試合状態の更新に失敗しました",details:s.message}}}async getPendingMatches(t){try{this.validateSport(t);const e=await this.client.get(`/matches/${t}/pending`);return e.success?{success:!0,data:e.data,message:`${t}の未完了試合一覧を取得しました`}:e}catch(e){return{success:!1,error:"GET_PENDING_MATCHES_ERROR",message:"未完了試合一覧の取得に失敗しました",details:e.message}}}async updateMultipleMatches(t){try{if(!Array.isArray(t)||0===t.length)throw new Error("更新データが正しくありません");for(const s of t){if(!s.matchId)throw new Error("試合IDが指定されていない更新データがあります");this.validateMatchId(s.matchId),this.validateMatchResult(s.result)}const e=await this.client.put("/matches/batch",{updates:t});return e.success?{success:!0,data:e.data,message:`${t.length}件の試合結果を更新しました`}:e}catch(e){return{success:!1,error:"UPDATE_MULTIPLE_MATCHES_ERROR",message:"試合結果の一括更新に失敗しました",details:e.message}}}async getMatchStats(t){try{this.validateMatchId(t);const e=await this.client.get(`/matches/${t}/stats`);return e.success?{success:!0,data:e.data,message:"試合統計情報を取得しました"}:e}catch(e){return{success:!1,error:"GET_MATCH_STATS_ERROR",message:"試合統計情報の取得に失敗しました",details:e.message}}}async getNextMatch(t){try{this.validateSport(t);const e=await this.client.get(`/matches/${t}/next`);return e.success?{success:!0,data:e.data,message:`${t}の次の試合情報を取得しました`}:e}catch(e){return{success:!1,error:"GET_NEXT_MATCH_ERROR",message:"次の試合情報の取得に失敗しました",details:e.message}}}getSupportedSports(){return{success:!0,data:this.supportedSports,message:"サポートされているスポーツ一覧"}}getValidStatuses(){return{success:!0,data:this.validStatuses,message:"有効なステータス一覧"}}};const _=new class{constructor(t={}){this.options={interval:3e4,maxRetries:3,retryDelay:5e3,exponentialBackoff:!0,respectVisibility:!0,enableLogging:!0,...t},this.intervalId=null,this.isPolling=!1,this.retryCount=0,this.lastSuccessTime=null,this.lastErrorTime=null,this.callbacks=new Map,this.errorCallbacks=new Map,this.isPageVisible=!document.hidden,this.setupVisibilityListener(),this.isOnline=navigator.onLine,this.setupNetworkListener()}setupVisibilityListener(){"undefined"!=typeof document&&document.addEventListener("visibilitychange",()=>{this.isPageVisible=!document.hidden,this.options.enableLogging,this.isPageVisible&&this.isPolling&&this.executePoll()})}setupNetworkListener(){"undefined"!=typeof window&&(window.addEventListener("online",()=>{this.isOnline=!0,this.options.enableLogging,this.isPolling&&this.executePoll()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.options.enableLogging}))}registerCallback(t,e){if("function"!=typeof e)throw new Error("Callback must be a function");this.callbacks.set(t,e),this.options.enableLogging}registerErrorCallback(t,e){if("function"!=typeof e)throw new Error("Error callback must be a function");this.errorCallbacks.set(t,e),this.options.enableLogging}unregisterCallback(t){const e=this.callbacks.delete(t);return this.options.enableLogging,e}unregisterErrorCallback(t){const e=this.errorCallbacks.delete(t);return this.options.enableLogging,e}start(){this.isPolling?this.options.enableLogging:(this.isPolling=!0,this.retryCount=0,this.options.enableLogging,this.intervalId=setInterval(()=>{this.executePoll()},this.options.interval))}stop(){this.isPolling&&(this.isPolling=!1,this.intervalId&&(clearInterval(this.intervalId),this.intervalId=null),this.options.enableLogging)}pause(){this.intervalId&&(clearInterval(this.intervalId),this.intervalId=null),this.options.enableLogging}resume(){this.isPolling&&!this.intervalId&&(this.intervalId=setInterval(()=>{this.executePoll()},this.options.interval),this.options.enableLogging)}async executePoll(){if(this.isPolling)if(!this.options.respectVisibility||this.isPageVisible)if(this.isOnline)try{this.options.enableLogging;const e=Array.from(this.callbacks.entries()).map(async([t,e])=>{try{return await e(),{key:t,success:!0}}catch(s){return{key:t,success:!1,error:s}}}),s=await Promise.allSettled(e);let a=!1;for(const r of s)if("fulfilled"===r.status&&!r.value.success){a=!0;const e=this.errorCallbacks.get(r.value.key);if(e)try{await e(r.value.error)}catch(t){}}if(a)throw new Error("One or more polling callbacks failed");this.onPollSuccess()}catch(e){this.onPollError(e)}else this.options.enableLogging;else this.options.enableLogging}onPollSuccess(){this.lastSuccessTime=Date.now(),this.retryCount=0,this.options.enableLogging}async onPollError(t){if(this.lastErrorTime=Date.now(),this.retryCount++,this.retryCount>=this.options.maxRetries)return y.showNotification("データの更新に失敗しました。ネットワーク接続を確認してください。","error",1e4),void(this.retryCount=0);const e=this.calculateRetryDelay();this.options.enableLogging,setTimeout(()=>{this.isPolling&&this.executePoll()},e)}calculateRetryDelay(){if(!this.options.exponentialBackoff)return this.options.retryDelay;const t=this.options.retryDelay*Math.pow(2,this.retryCount-1);return Math.min(t,6e4)}setInterval(t){if("number"!=typeof t||t<1e3)throw new Error("Interval must be a number >= 1000ms");this.options.interval=t,this.isPolling&&(this.pause(),this.resume()),this.options.enableLogging}getStats(){return{isPolling:this.isPolling,isPageVisible:this.isPageVisible,isOnline:this.isOnline,interval:this.options.interval,retryCount:this.retryCount,lastSuccessTime:this.lastSuccessTime,lastErrorTime:this.lastErrorTime,callbackCount:this.callbacks.size,errorCallbackCount:this.errorCallbacks.size}}destroy(){this.stop(),this.callbacks.clear(),this.errorCallbacks.clear(),this.options.enableLogging}}({interval:3e4,maxRetries:3,retryDelay:5e3,exponentialBackoff:!0,respectVisibility:!0,enableLogging:!1});class I{constructor(t,e={}){this.data=t,this.timestamp=Date.now(),this.ttl=e.ttl||3e5,this.tags=e.tags||[],this.priority=e.priority||1,this.accessCount=0,this.lastAccessed=this.timestamp}isValid(){return Date.now()-this.timestamp<this.ttl}access(){return this.accessCount++,this.lastAccessed=Date.now(),this.data}getRemainingTTL(){const t=this.ttl-(Date.now()-this.timestamp);return Math.max(0,t)}}class A{constructor(t={}){this.options={maxSize:100,defaultTTL:3e5,cleanupInterval:6e4,enableLogging:!1,...t},this.cache=new Map,this.stats={hits:0,misses:0,sets:0,deletes:0,evictions:0},this.startCleanup()}set(t,e,s={}){if(!t)throw new Error("Cache key is required");const a=s.ttl||this.options.defaultTTL,r=new I(e,{ttl:a,tags:s.tags,priority:s.priority});return this.cache.size>=this.options.maxSize&&!this.cache.has(t)&&this.evictLRU(),this.cache.set(t,r),this.stats.sets++,this.options.enableLogging,!0}get(t){if(!t)return null;const e=this.cache.get(t);return e?e.isValid()?(this.stats.hits++,this.options.enableLogging,e.access()):(this.cache.delete(t),this.stats.misses++,this.options.enableLogging,null):(this.stats.misses++,null)}delete(t){const e=this.cache.delete(t);return e&&(this.stats.deletes++,this.options.enableLogging),e}invalidateByTag(t){const e=Array.isArray(t)?t:[t];let s=0;for(const[a,r]of this.cache.entries())r.tags&&r.tags.some(t=>e.includes(t))&&(this.cache.delete(a),s++);return this.options.enableLogging,s}clear(){const t=this.cache.size;return this.cache.clear(),this.options.enableLogging,t}evictLRU(){let t=null,e=Date.now();for(const[s,a]of this.cache.entries())a.lastAccessed<=e&&(e=a.lastAccessed,t=s);t&&(this.cache.delete(t),this.stats.evictions++,this.options.enableLogging)}cleanup(){let t=0;for(const[e,s]of this.cache.entries())s.isValid()||(this.cache.delete(e),t++);return this.options.enableLogging,t}startCleanup(){this.cleanupInterval&&clearInterval(this.cleanupInterval),this.cleanupInterval=setInterval(()=>{this.cleanup()},this.options.cleanupInterval)}stopCleanup(){this.cleanupInterval&&(clearInterval(this.cleanupInterval),this.cleanupInterval=null)}getStats(){const t=this.stats.hits+this.stats.misses>0?(this.stats.hits/(this.stats.hits+this.stats.misses)*100).toFixed(2):0;return{...this.stats,size:this.cache.size,maxSize:this.options.maxSize,hitRate:`${t}%`}}getInfo(){const t=[];for(const[e,s]of this.cache.entries())t.push({key:e,size:JSON.stringify(s.data).length,ttl:s.ttl,remainingTTL:s.getRemainingTTL(),accessCount:s.accessCount,lastAccessed:s.lastAccessed,tags:s.tags,priority:s.priority,isValid:s.isValid()});return{entries:t,stats:this.getStats(),options:this.options}}destroy(){this.stopCleanup(),this.clear()}}class M{constructor(t={}){this.options={storage:"localStorage",prefix:"cache_",defaultTTL:36e5,enableLogging:!1,...t},this.storage="sessionStorage"===this.options.storage?sessionStorage:localStorage}getStorageKey(t){return`${this.options.prefix}${t}`}set(t,e,s={}){if(!t)throw new Error("Cache key is required");try{const a=s.ttl||this.options.defaultTTL,r={data:e,timestamp:Date.now(),ttl:a},i=this.getStorageKey(t);return this.storage.setItem(i,JSON.stringify(r)),this.options.enableLogging,!0}catch(a){return!1}}get(t){if(!t)return null;try{const e=this.getStorageKey(t),s=this.storage.getItem(e);if(!s)return null;const a=JSON.parse(s);return Date.now()-a.timestamp>a.ttl?(this.storage.removeItem(e),this.options.enableLogging,null):(this.options.enableLogging,a.data)}catch(e){return null}}delete(t){try{const e=this.getStorageKey(t);return this.storage.removeItem(e),this.options.enableLogging,!0}catch(e){return!1}}clear(){try{const t=[];for(let e=0;e<this.storage.length;e++){const s=this.storage.key(e);s&&s.startsWith(this.options.prefix)&&t.push(s)}return t.forEach(t=>{this.storage.removeItem(t)}),this.options.enableLogging,t.length}catch(t){return 0}}cleanup(){try{const e=[];for(let s=0;s<this.storage.length;s++){const a=this.storage.key(s);if(a&&a.startsWith(this.options.prefix))try{const t=this.storage.getItem(a);if(t){const s=JSON.parse(t);Date.now()-s.timestamp>s.ttl&&e.push(a)}}catch(t){e.push(a)}}return e.forEach(t=>{this.storage.removeItem(t)}),this.options.enableLogging&&e.length,e.length}catch(e){return 0}}}const $=new class{constructor(t={}){this.options={enableMemoryCache:!0,enableBrowserCache:!0,memoryFirst:!0,...t},this.options.enableMemoryCache&&(this.memoryCache=new A(t.memory)),this.options.enableBrowserCache&&(this.browserCache=new M(t.browser))}async set(t,e,s={}){const a={};return this.memoryCache&&(a.memory=this.memoryCache.set(t,e,s)),this.browserCache&&!1!==s.persistent&&(a.browser=this.browserCache.set(t,e,s)),a}async get(t){if(this.options.memoryFirst&&this.memoryCache){const e=this.memoryCache.get(t);if(null!==e)return e}if(this.browserCache){const e=this.browserCache.get(t);if(null!==e)return this.memoryCache&&this.memoryCache.set(t,e),e}return!this.options.memoryFirst&&this.memoryCache?this.memoryCache.get(t):null}async delete(t){const e={};return this.memoryCache&&(e.memory=this.memoryCache.delete(t)),this.browserCache&&(e.browser=this.browserCache.delete(t)),e}async invalidateByTag(t){const e={};return this.memoryCache&&(e.memory=this.memoryCache.invalidateByTag(t)),e.browser=0,e}async clear(){const t={};return this.memoryCache&&(t.memory=this.memoryCache.clear()),this.browserCache&&(t.browser=this.browserCache.clear()),t}async cleanup(){const t={};return this.memoryCache&&(t.memory=this.memoryCache.cleanup()),this.browserCache&&(t.browser=this.browserCache.cleanup()),t}getStats(){return{memory:this.memoryCache?this.memoryCache.getStats():null,browser:this.browserCache?"Available":null}}destroy(){this.memoryCache&&this.memoryCache.destroy()}}({memory:{maxSize:100,defaultTTL:3e5,enableLogging:!1},browser:{storage:"localStorage",prefix:"tournament_cache_",defaultTTL:36e5,enableLogging:!1}});async function O(t,e,s={}){const a=s.cache||$,r=await a.get(t);if(null!==r)return r;try{const r=await e();return await a.set(t,r,s),r}catch(i){if(s.staleWhileRevalidate){const e=await a.get(t);if(null!==e)return e}throw i}}const P={tournaments:{},currentSport:"volleyball",loading:!1,error:null,lastUpdated:null,cache:{},pollingInterval:null},{subscribe:k,set:D,update:x}=t(P),N=3e5,U=["volleyball","table_tennis","soccer"];function V(t){x(e=>({...e,loading:t}))}function B(t){x(e=>({...e,error:t,loading:!1}))}function H(){x(t=>({...t,error:null}))}function z(t){if(!t)throw new Error("スポーツ名が指定されていません");if(!U.includes(t))throw new Error(`サポートされていないスポーツです: ${t}`);return!0}async function F(t=null,e=!0){try{if(H(),t){z(t),V(!0);const s=`tournament_${t}`,a=()=>S.getTournament(t),r=e?await O(s,a,{cache:$,ttl:N,tags:["tournament",t],staleWhileRevalidate:!0}):await a();return r.success?(x(e=>({...e,tournaments:{...e.tournaments,[t]:r.data},loading:!1,lastUpdated:Date.now()})),r):(B(r.message||"トーナメントデータの取得に失敗しました"),r)}{V(!0);const t="tournaments_all",s=()=>S.getTournaments(),a=e?await O(t,s,{cache:$,ttl:N,tags:["tournament","all"],staleWhileRevalidate:!0}):await s();return a.success?(x(t=>({...t,tournaments:a.data,loading:!1,lastUpdated:Date.now()})),a):(B(a.message||"トーナメントデータの取得に失敗しました"),a)}}catch(s){return B(s.message||"予期しないエラーが発生しました"),{success:!1,error:"FETCH_TOURNAMENTS_ERROR",message:s.message||"トーナメントデータの取得に失敗しました"}}}async function G(t=null){try{H();const s=e({subscribe:k}),a=t||s.currentSport;await F(a,!1);return{success:!0,message:"データを更新しました"}}catch(s){return B(s.message||"データの更新に失敗しました"),{success:!1,error:"REFRESH_DATA_ERROR",message:s.message||"データの更新に失敗しました"}}}function j(){e({subscribe:k}).pollingInterval||(_.registerCallback("tournament-data",async()=>{e({subscribe:k}).loading||await G()}),_.registerErrorCallback("tournament-data",async t=>{B("データの更新中にエラーが発生しました")}),_.start(),x(t=>({...t,pollingInterval:"active"})))}function K(){_.unregisterCallback("tournament-data"),_.unregisterErrorCallback("tournament-data");0===_.getStats().callbackCount&&_.stop(),x(t=>({...t,pollingInterval:null}))}const W={subscribe:k,fetchTournaments:F,updateMatch:async function(t,s){try{if(H(),!t)throw new Error("試合IDが指定されていません");if(!s||"object"!=typeof s)throw new Error("試合結果データが正しくありません");V(!0);const a=await L.updateMatch(t,s);if(a.success){const t=e({subscribe:k}).currentSport;return await $.invalidateByTag(["tournament",t]),await F(t,!1),{success:!0,data:a.data,message:"試合結果を更新しました"}}return B(a.message||"試合結果の更新に失敗しました"),a}catch(a){return B(a.message||"予期しないエラーが発生しました"),{success:!1,error:"UPDATE_MATCH_ERROR",message:a.message||"試合結果の更新に失敗しました"}}},switchSport:function(t){try{return z(t),x(e=>({...e,currentSport:t,error:null})),F(t),{success:!0,message:`スポーツを${t}に切り替えました`}}catch(e){return B(e.message||"スポーツの切り替えに失敗しました"),{success:!1,error:"SWITCH_SPORT_ERROR",message:e.message||"スポーツの切り替えに失敗しました"}}},refreshData:G,initialize:async function(){try{return await F(),j(),"undefined"!=typeof document&&document.addEventListener("visibilitychange",()=>{document.hidden||G()}),{success:!0,message:"トーナメントストアを初期化しました"}}catch(t){return B(t.message||"初期化に失敗しました"),{success:!1,error:"INITIALIZE_ERROR",message:t.message||"初期化に失敗しました"}}},cleanup:function(){return K(),D(P),{success:!0,message:"トーナメントストアをクリーンアップしました"}},startPolling:j,stopPolling:K,clearCache:async function(t=null){try{return t?await $.invalidateByTag(["tournament",t]):await $.invalidateByTag(["tournament"]),{success:!0,message:t?`${t}のキャッシュをクリアしました`:"トーナメントキャッシュをクリアしました"}}catch(e){return{success:!1,error:"CLEAR_CACHE_ERROR",message:"キャッシュのクリアに失敗しました"}}},getCacheStats:function(){return $.getStats()},getCurrentTournament:function(){const t=e({subscribe:k});return t.tournaments[t.currentSport]||null},getTournamentBySport:function(t){return z(t),e({subscribe:k}).tournaments[t]||null},getSupportedSports:function(){return[...U]},setLoading:V,setError:B,clearError:H};function J(e,p){s(p,!1);const[y,S]=R(),L=()=>C(k,"$visibleItems",y);let _=T(p,"items",24,()=>[]),I=T(p,"staggerDelay",8,100),A=T(p,"animationType",8,"fadeInUp"),M=T(p,"className",8,""),$=T(p,"itemClassName",8,""),O=T(p,"tag",8,"div"),P=T(p,"itemTag",8,"div");const k=t([]);let D=g(!1);function x(){k.set([]),_().forEach((t,e)=>{setTimeout(()=>{k.update(e=>[...e,t])},e*I())})}a(()=>{m(D,!0),x()}),r(()=>(n(D),i(_())),()=>{n(D)&&_().length>0&&x()}),o(),f();var N=c(),U=l(N);b(U,O,!1,(t,e)=>{w(t,()=>({class:`staggered-list ${M()??""}`}),void 0,void 0,"svelte-12xptd");var s=c(),a=l(s);E(a,3,L,(t,e)=>t.id||e,(t,e,s)=>{var a=c(),r=l(a);b(r,P,!1,(t,a)=>{w(t,t=>({class:`stagger-item ${$()??""} ${t??""}`,style:`animation-delay: ${n(s)*(I()/1e3)}s`}),[()=>(i(n(s)),d(()=>function(t){return`animate-${A()} stagger-item-${t}`}(n(s))))],void 0,"svelte-12xptd");var r=c(),o=l(r);v(o,p,"default",{get item(){return n(e)},get index(){return n(s)}}),h(a,r)}),h(t,a)}),h(e,s)}),h(e,N),u(),S()}export{J as S,S as a,L as m,W as t};
