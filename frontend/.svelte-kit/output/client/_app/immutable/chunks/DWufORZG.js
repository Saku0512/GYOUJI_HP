import{w as A,g as y}from"./CT_lE3Pl.js";import{a as p}from"./DT5H3szw.js";class w{constructor(e=p){this.client=e,this.tokenKey="auth_token",this.refreshTokenKey="refresh_token",this.userKey="auth_user"}getStoredToken(){return typeof window>"u"?null:localStorage.getItem(this.tokenKey)}getStoredRefreshToken(){return typeof window>"u"?null:localStorage.getItem(this.refreshTokenKey)}getStoredUser(){if(typeof window>"u")return null;const e=localStorage.getItem(this.userKey);try{return e?JSON.parse(e):null}catch(s){return console.error("Failed to parse stored user data:",s),null}}storeToken(e,s=null,t=null){typeof window>"u"||(localStorage.setItem(this.tokenKey,e),s&&localStorage.setItem(this.refreshTokenKey,s),t&&localStorage.setItem(this.userKey,JSON.stringify(t)),this.client.setToken(e))}clearStoredAuth(){typeof window>"u"||(localStorage.removeItem(this.tokenKey),localStorage.removeItem(this.refreshTokenKey),localStorage.removeItem(this.userKey),this.client.setToken(null))}isTokenExpired(e){if(!e)return!0;try{const s=JSON.parse(atob(e.split(".")[1])),t=Math.floor(Date.now()/1e3);return s.exp<t}catch(s){return console.error("Failed to parse JWT token:",s),!0}}initializeAuth(){const e=this.getStoredToken();return e&&!this.isTokenExpired(e)?(this.client.setToken(e),!0):(e&&this.clearStoredAuth(),!1)}async login(e,s){try{const t=await this.client.post("/auth/login",{username:e,password:s});if(t.success&&t.data){const{token:r,refresh_token:o,user:a}=t.data;return this.storeToken(r,o,a),{success:!0,data:{token:r,refresh_token:o,user:a},message:"ログインに成功しました"}}return t}catch(t){return console.error("Login error:",t),{success:!1,error:"LOGIN_ERROR",message:"ログインに失敗しました",details:t.message}}}async logout(){try{return this.getStoredToken()&&await this.client.post("/auth/logout"),this.clearStoredAuth(),typeof window<"u"&&window.dispatchEvent(new CustomEvent("auth:logout")),{success:!0,message:"ログアウトしました"}}catch(e){return console.error("Logout error:",e),this.clearStoredAuth(),{success:!0,message:"ログアウトしました",warning:"サーバーとの通信でエラーが発生しましたが、ローカルの認証情報はクリアされました"}}}async refreshToken(){try{const e=this.getStoredRefreshToken();if(!e)return{success:!1,error:"NO_REFRESH_TOKEN",message:"リフレッシュトークンが見つかりません"};const s=await this.client.post("/auth/refresh",{refresh_token:e});if(s.success&&s.data){const{token:t,refresh_token:r,user:o}=s.data;return this.storeToken(t,r||e,o),{success:!0,data:{token:t,refresh_token:r||e,user:o},message:"トークンを更新しました"}}return this.clearStoredAuth(),s}catch(e){return console.error("Token refresh error:",e),this.clearStoredAuth(),{success:!1,error:"REFRESH_ERROR",message:"トークンの更新に失敗しました",details:e.message}}}async validateToken(){try{const e=this.getStoredToken();if(!e)return{success:!1,error:"NO_TOKEN",message:"トークンが見つかりません"};if(this.isTokenExpired(e)){const t=await this.refreshToken();return t.success?{success:!0,data:t.data,message:"トークンを更新して検証しました"}:{success:!1,error:"TOKEN_EXPIRED",message:"トークンの期限が切れています"}}const s=await this.client.get("/auth/validate");return s.success?{success:!0,data:s.data,message:"トークンは有効です"}:(this.clearStoredAuth(),s)}catch(e){return console.error("Token validation error:",e),{success:!1,error:"VALIDATION_ERROR",message:"トークンの検証に失敗しました",details:e.message}}}getAuthState(){const e=this.getStoredToken(),s=this.getStoredUser();return{isAuthenticated:!!(e&&!this.isTokenExpired(e)),token:e,user:s}}setupAutoRefresh(e=50){if(typeof window>"u")return;const s=e*60*1e3;setInterval(async()=>{const t=this.getStoredToken();if(t&&!this.isTokenExpired(t))try{const r=JSON.parse(atob(t.split(".")[1])),o=Math.floor(Date.now()/1e3);r.exp-o<600&&await this.refreshToken()}catch(r){console.error("Auto refresh error:",r)}},s)}}const c=new w;typeof window<"u"&&(c.initializeAuth(),c.setupAutoRefresh());const l={AUTH_TOKEN:"tournament_auth_token",USER_DATA:"tournament_user_data"};function T(n,e){try{const s=JSON.stringify(e);return localStorage.setItem(n,s),!0}catch(s){return console.error("Failed to save to localStorage:",s),!1}}function m(n,e=null){try{const s=localStorage.getItem(n);return s===null?e:JSON.parse(s)}catch(s){return console.error("Failed to get from localStorage:",s),e}}function S(n){try{return localStorage.removeItem(n),!0}catch(e){return console.error("Failed to remove from localStorage:",e),!1}}function f(n){return T(l.AUTH_TOKEN,n)}function h(){return m(l.AUTH_TOKEN)}function E(){return S(l.AUTH_TOKEN)}function g(n){return T(l.USER_DATA,n)}function k(){return m(l.USER_DATA)}function R(){return S(l.USER_DATA)}function u(){E(),R()}const i={isAuthenticated:!1,token:null,user:null,loading:!1};function _(){const{subscribe:n,set:e,update:s}=A(i);return{subscribe:n,setLoading:t=>{s(r=>({...r,loading:t}))},setAuthState:t=>{s(r=>({...r,isAuthenticated:!!t.token,token:t.token,user:t.user,loading:!1}))},clearAuth:()=>{e({...i})},login:async t=>{s(r=>({...r,loading:!0}));try{const r=await c.login(t.username,t.password);if(r.success){const o={token:r.data.token,user:r.data.user};return f(r.data.token),g(r.data.user),s(a=>({...a,isAuthenticated:!0,token:r.data.token,user:r.data.user,loading:!1})),r}else return s(o=>({...o,loading:!1})),r}catch(r){return console.error("Login error in store:",r),s(o=>({...o,loading:!1})),{success:!1,error:"LOGIN_STORE_ERROR",message:"ログイン処理でエラーが発生しました",details:r.message}}},logout:async()=>{s(t=>({...t,loading:!0}));try{const t=await c.logout();return u(),e({...i}),t}catch(t){return console.error("Logout error in store:",t),u(),e({...i}),{success:!0,message:"ログアウトしました",warning:"サーバーとの通信でエラーが発生しましたが、ローカルの認証情報はクリアされました"}}},checkAuthStatus:async()=>{s(t=>({...t,loading:!0}));try{const t=h(),r=k();if(!t)return s(a=>({...a,loading:!1})),{success:!1,error:"NO_TOKEN",message:"トークンが見つかりません"};const o=await c.validateToken();return o.success?(s(a=>({...a,isAuthenticated:!0,token:t,user:o.data?.user||r,loading:!1})),o):(u(),e({...i}),o)}catch(t){return console.error("Auth status check error in store:",t),u(),e({...i}),{success:!1,error:"AUTH_CHECK_ERROR",message:"認証状態の確認でエラーが発生しました",details:t.message}}},refreshToken:async()=>{if(y({subscribe:n}).loading)return{success:!1,error:"ALREADY_LOADING",message:"既に処理中です"};s(r=>({...r,loading:!0}));try{const r=await c.refreshToken();if(r.success){const o={token:r.data.token,user:r.data.user};return f(r.data.token),g(r.data.user),s(a=>({...a,isAuthenticated:!0,token:r.data.token,user:r.data.user,loading:!1})),r}else return u(),e({...i}),r}catch(r){return console.error("Token refresh error in store:",r),u(),e({...i}),{success:!1,error:"REFRESH_STORE_ERROR",message:"トークンの更新でエラーが発生しました",details:r.message}}},initialize:async function(){const t=h(),r=k();t&&r&&await this.checkAuthStatus()}}}const d=_();typeof window<"u"&&(d.initialize(),window.addEventListener("auth:logout",()=>{d.clearAuth()}),document.addEventListener("visibilitychange",()=>{document.hidden||h()&&d.checkAuthStatus()}));export{d as a,h as g};
