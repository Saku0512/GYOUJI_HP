import{w as e,g as t}from"./index.js";import{b as s}from"./client.js";const r=new class{constructor(e=s){this.client=e,this.tokenKey="auth_token",this.refreshTokenKey="refresh_token",this.userKey="auth_user"}getStoredToken(){return"undefined"==typeof window?null:localStorage.getItem(this.tokenKey)}getStoredRefreshToken(){return"undefined"==typeof window?null:localStorage.getItem(this.refreshTokenKey)}getStoredUser(){if("undefined"==typeof window)return null;const e=localStorage.getItem(this.userKey);try{return e?JSON.parse(e):null}catch(t){return null}}storeToken(e,t=null,s=null){"undefined"!=typeof window&&(localStorage.setItem(this.tokenKey,e),t&&localStorage.setItem(this.refreshTokenKey,t),s&&localStorage.setItem(this.userKey,JSON.stringify(s)),this.client.setToken(e))}clearStoredAuth(){"undefined"!=typeof window&&(localStorage.removeItem(this.tokenKey),localStorage.removeItem(this.refreshTokenKey),localStorage.removeItem(this.userKey),this.client.setToken(null))}isTokenExpired(e){if(!e)return!0;try{const t=JSON.parse(atob(e.split(".")[1])),s=Math.floor(Date.now()/1e3);return t.exp<s}catch(t){return!0}}initializeAuth(){const e=this.getStoredToken();return e&&!this.isTokenExpired(e)?(this.client.setToken(e),!0):(e&&this.clearStoredAuth(),!1)}async login(e,t){try{const s=await this.client.post("/auth/login",{username:e,password:t});if(s.success&&s.data){const{token:e,refresh_token:t,user:r}=s.data;return this.storeToken(e,t,r),{success:!0,data:{token:e,refresh_token:t,user:r},message:"ログインに成功しました"}}return s}catch(s){return{success:!1,error:"LOGIN_ERROR",message:"ログインに失敗しました",details:s.message}}}async logout(){try{return this.getStoredToken()&&await this.client.post("/auth/logout"),this.clearStoredAuth(),"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("auth:logout")),{success:!0,message:"ログアウトしました"}}catch(e){return this.clearStoredAuth(),{success:!0,message:"ログアウトしました",warning:"サーバーとの通信でエラーが発生しましたが、ローカルの認証情報はクリアされました"}}}async refreshToken(){try{const e=this.getStoredRefreshToken();if(!e)return{success:!1,error:"NO_REFRESH_TOKEN",message:"リフレッシュトークンが見つかりません"};const t=await this.client.post("/auth/refresh",{refresh_token:e});if(t.success&&t.data){const{token:s,refresh_token:r,user:n}=t.data;return this.storeToken(s,r||e,n),{success:!0,data:{token:s,refresh_token:r||e,user:n},message:"トークンを更新しました"}}return this.clearStoredAuth(),t}catch(e){return this.clearStoredAuth(),{success:!1,error:"REFRESH_ERROR",message:"トークンの更新に失敗しました",details:e.message}}}async validateToken(){try{const e=this.getStoredToken();if(!e)return{success:!1,error:"NO_TOKEN",message:"トークンが見つかりません"};if(this.isTokenExpired(e)){const e=await this.refreshToken();return e.success?{success:!0,data:e.data,message:"トークンを更新して検証しました"}:{success:!1,error:"TOKEN_EXPIRED",message:"トークンの期限が切れています"}}const t=await this.client.get("/auth/validate");return t.success?{success:!0,data:t.data,message:"トークンは有効です"}:(this.clearStoredAuth(),t)}catch(e){return{success:!1,error:"VALIDATION_ERROR",message:"トークンの検証に失敗しました",details:e.message}}}getAuthState(){const e=this.getStoredToken(),t=this.getStoredUser();return{isAuthenticated:!(!e||this.isTokenExpired(e)),token:e,user:t}}setupAutoRefresh(e=50){if("undefined"==typeof window)return;setInterval(async()=>{const e=this.getStoredToken();if(e&&!this.isTokenExpired(e))try{const t=JSON.parse(atob(e.split(".")[1])),s=Math.floor(Date.now()/1e3);t.exp-s<600&&await this.refreshToken()}catch(t){}},60*e*1e3)}};"undefined"!=typeof window&&(r.initializeAuth(),r.setupAutoRefresh());const n="tournament_auth_token",o="tournament_user_data";function a(e,t){try{const s=JSON.stringify(t);return localStorage.setItem(e,s),!0}catch(s){return!1}}function i(e,t=null){try{const s=localStorage.getItem(e);return null===s?t:JSON.parse(s)}catch(s){return t}}function u(e){try{return localStorage.removeItem(e),!0}catch(t){return!1}}function c(e){return a(n,e)}function d(){return i(n)}function h(e){return a(o,e)}function l(){return i(o)}function g(){u(n),u(o)}const f={isAuthenticated:!1,token:null,user:null,loading:!1};const k=function(){const{subscribe:s,set:n,update:o}=e(f);return{subscribe:s,setLoading:e=>{o(t=>({...t,loading:e}))},setAuthState:e=>{o(t=>({...t,isAuthenticated:!!e.token,token:e.token,user:e.user,loading:!1}))},clearAuth:()=>{n({...f})},login:async e=>{o(e=>({...e,loading:!0}));try{const t=await r.login(e.username,e.password);if(t.success){t.data.token,t.data.user;return c(t.data.token),h(t.data.user),o(e=>({...e,isAuthenticated:!0,token:t.data.token,user:t.data.user,loading:!1})),t}return o(e=>({...e,loading:!1})),t}catch(t){return o(e=>({...e,loading:!1})),{success:!1,error:"LOGIN_STORE_ERROR",message:"ログイン処理でエラーが発生しました",details:t.message}}},logout:async()=>{o(e=>({...e,loading:!0}));try{const e=await r.logout();return g(),n({...f}),e}catch(e){return g(),n({...f}),{success:!0,message:"ログアウトしました",warning:"サーバーとの通信でエラーが発生しましたが、ローカルの認証情報はクリアされました"}}},checkAuthStatus:async()=>{o(e=>({...e,loading:!0}));try{const e=d(),t=l();if(!e)return o(e=>({...e,loading:!1})),{success:!1,error:"NO_TOKEN",message:"トークンが見つかりません"};const s=await r.validateToken();return s.success?(o(r=>({...r,isAuthenticated:!0,token:e,user:s.data?.user||t,loading:!1})),s):(g(),n({...f}),s)}catch(e){return g(),n({...f}),{success:!1,error:"AUTH_CHECK_ERROR",message:"認証状態の確認でエラーが発生しました",details:e.message}}},refreshToken:async()=>{if(t({subscribe:s}).loading)return{success:!1,error:"ALREADY_LOADING",message:"既に処理中です"};o(e=>({...e,loading:!0}));try{const e=await r.refreshToken();if(e.success){e.data.token,e.data.user;return c(e.data.token),h(e.data.user),o(t=>({...t,isAuthenticated:!0,token:e.data.token,user:e.data.user,loading:!1})),e}return g(),n({...f}),e}catch(e){return g(),n({...f}),{success:!1,error:"REFRESH_STORE_ERROR",message:"トークンの更新でエラーが発生しました",details:e.message}}},initialize:async function(){const e=d(),t=l();e&&t&&await this.checkAuthStatus()}}}();"undefined"!=typeof window&&(k.initialize(),window.addEventListener("auth:logout",()=>{k.clearAuth()}),document.addEventListener("visibilitychange",()=>{if(!document.hidden){d()&&k.checkAuthStatus()}}));export{k as a,d as g};
