import{w as t,A as e}from"./vendor.js";import{b as n}from"./api.js";const a="tournament_auth_token",s="tournament_user_data";function r(t,e){try{const n=JSON.stringify(e);return localStorage.setItem(t,n),!0}catch(n){return!1}}function u(t,e=null){try{const n=localStorage.getItem(t);return null===n?e:JSON.parse(n)}catch(n){return e}}function o(t){try{return localStorage.removeItem(t),!0}catch(e){return!1}}function c(t){return r(a,t)}function i(){return u(a)}function d(t){return r(s,t)}function l(){return u(s)}function g(){o(a),o(s)}const h={isAuthenticated:!1,token:null,user:null,loading:!1};const f=function(){const{subscribe:a,set:s,update:r}=t(h);return{subscribe:a,setLoading:t=>{r(e=>({...e,loading:t}))},setAuthState:t=>{r(e=>({...e,isAuthenticated:!!t.token,token:t.token,user:t.user,loading:!1}))},clearAuth:()=>{s({...h})},login:async t=>{r(t=>({...t,loading:!0}));try{const e=await n.login(t.username,t.password);if(e.success){e.data.token,e.data.user;return c(e.data.token),d(e.data.user),r(t=>({...t,isAuthenticated:!0,token:e.data.token,user:e.data.user,loading:!1})),e}return r(t=>({...t,loading:!1})),e}catch(e){return r(t=>({...t,loading:!1})),{success:!1,error:"LOGIN_STORE_ERROR",message:"ログイン処理でエラーが発生しました",details:e.message}}},logout:async()=>{r(t=>({...t,loading:!0}));try{const t=await n.logout();return g(),s({...h}),t}catch(t){return g(),s({...h}),{success:!0,message:"ログアウトしました",warning:"サーバーとの通信でエラーが発生しましたが、ローカルの認証情報はクリアされました"}}},checkAuthStatus:async()=>{r(t=>({...t,loading:!0}));try{const t=i(),e=l();if(!t)return r(t=>({...t,loading:!1})),{success:!1,error:"NO_TOKEN",message:"トークンが見つかりません"};const a=await n.validateToken();return a.success?(r(n=>({...n,isAuthenticated:!0,token:t,user:a.data?.user||e,loading:!1})),a):(g(),s({...h}),a)}catch(t){return g(),s({...h}),{success:!1,error:"AUTH_CHECK_ERROR",message:"認証状態の確認でエラーが発生しました",details:t.message}}},refreshToken:async()=>{if(e({subscribe:a}).loading)return{success:!1,error:"ALREADY_LOADING",message:"既に処理中です"};r(t=>({...t,loading:!0}));try{const t=await n.refreshToken();if(t.success){t.data.token,t.data.user;return c(t.data.token),d(t.data.user),r(e=>({...e,isAuthenticated:!0,token:t.data.token,user:t.data.user,loading:!1})),t}return g(),s({...h}),t}catch(t){return g(),s({...h}),{success:!1,error:"REFRESH_STORE_ERROR",message:"トークンの更新でエラーが発生しました",details:t.message}}},initialize:async function(){const t=i(),e=l();t&&e&&await this.checkAuthStatus()}}}();"undefined"!=typeof window&&(f.initialize(),window.addEventListener("auth:logout",()=>{f.clearAuth()}),document.addEventListener("visibilitychange",()=>{if(!document.hidden){i()&&f.checkAuthStatus()}}));export{f as a,i as g};
